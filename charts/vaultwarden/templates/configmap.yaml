{{- $fullName := include "vaultwarden.fullname" . -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $fullName }}-config
  labels:
    app.kubernetes.io/name: {{ include "vaultwarden.name" . }}
    helm.sh/chart: {{ include "vaultwarden.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  {{- range $key, $val := .Values.vaultwarden }}
  {{ $key | upper }}: {{ $val | quote }}
  {{- end}}
  {{- if and .Values.database.wal (eq .Values.storage.type "sqlite") }}
  ENABLE_DB_WAL: "true"
  {{- end }}
  {{ if .Values.storage.enabled -}}
  DATA_FOLDER: {{ .Values.storage.path | quote }}
  {{ end }}
  ROCKET_PORT: {{ .Values.service.target_port | quote }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $fullName }}-scripts
  labels:
    app.kubernetes.io/name: {{ include "vaultwarden.name" . }}
    helm.sh/chart: {{ include "vaultwarden.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
data:
  update-config.sh: |-
    #!/bin/sh
    CONFIG_FILE="${DATA_FOLDER}/config.json"
    if [ ! -f "${CONFIG_FILE}" ]; then
      echo "File \"${CONFIG_FILE}\" doesn't exist"
      exit
    fi
    JSON_KEYS=$(cat "${CONFIG_FILE}" | sed -e 's/[{}]/''/g' | awk '{gsub("\"","");gsub(":",""); print $1}')
    for KEY in ${JSON_KEYS}; do
      VAR=$(echo "${KEY}" | tr 'a-z' 'A-Z')
      VALUE="$(eval "echo \"\$${VAR}\"")"
      if [ -n "${VALUE}" ]; then
        echo "${VAR}: ${VALUE}"
        sed -i "s|\"${KEY}\": \(true\|false\),|\"${KEY}\": ${VALUE},|g" "${CONFIG_FILE}"
        sed -i "s|\"${KEY}\": [0-9]*,|\"${KEY}\": ${VALUE},|g" "${CONFIG_FILE}"
        sed -i "s|\"${KEY}\": \"\(.*\)\",|\"${KEY}\": \"${VALUE}\",|g" "${CONFIG_FILE}"
      fi
    done
