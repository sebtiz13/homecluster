{{- if .Values.actions.runner.enabled -}}
{{- $forgejoVals := dict "Values" .Values.forgejo "Chart" .Chart "Release" .Release -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: forgejo-runner
  labels:
    {{- include "gitea.actions.runner.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.actions.runner.replicas }}
  strategy:
    type: {{ .Values.forgejo.strategy.type }}
    {{- if eq .Values.forgejo.strategy.type "RollingUpdate" }}
    rollingUpdate:
      maxUnavailable: {{ .Values.forgejo.strategy.rollingUpdate.maxUnavailable }}
      maxSurge: {{ .Values.forgejo.strategy.rollingUpdate.maxSurge }}
    {{- end }}
  selector:
    matchLabels:
      {{- include "gitea.actions.runner.selectorLabels" . | nindent 6 }}
      {{- if .Values.forgejo.deployment.labels }}
      {{- toYaml .Values.forgejo.deployment.labels | nindent 6 }}
      {{- end }}
  template:
    metadata:
      annotations:
        {{- with .Values.forgejo.gitea.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "gitea.actions.runner.labels" . | nindent 8 }}
        {{- if .Values.forgejo.deployment.labels }}
        {{- toYaml .Values.forgejo.deployment.labels | nindent 68 }}
        {{- end }}
    spec:
      {{- if .Values.forgejo.schedulerName }}
      schedulerName: "{{ .Values.forgejo.schedulerName }}"
      {{- end }}
      {{- if (or .Values.forgejo.serviceAccount.create .Values.forgejo.serviceAccount.name) }}
      serviceAccountName: {{ include "gitea.actions.runner.serviceAccountName" . }}
      {{- end }}
      {{- if .Values.forgejo.priorityClassName }}
      priorityClassName: "{{ .Values.forgejo.priorityClassName }}"
      {{- end }}
      {{- include "gitea.images.pullSecrets" $forgejoVals | nindent 6 }}
      securityContext:
        {{- toYaml .Values.forgejo.podSecurityContext | nindent 8 }}
      initContainers:
        # First wait for a Forgejo instance to come online. This is to guard
        # against race conditions between forgejo and the actions runner when
        # both are being set up for the first time.
        - name: await-forgejo
          image: alpine/curl
          command:
            - sh
          args:
            - -c
            - |
              retries=0
              max=3
              echo 'Waiting for Forgejo to come online before proceeding'
              until $(curl --output /dev/null --silent --head --fail "$FORGEJO_INSTANCE_URL");
              do
                retries=$((retries+1))
                if [ $retries -gt $max ]; then
                  echo 'Max retries reached, exiting'
                  exit 1
                fi
                echo "Checking again in 5 seconds. Retry count: ${retries} of ${max}";
                sleep 5;
              done;
          env:
            - name: FORGEJO_INSTANCE_URL
              value: http://{{ include "gitea.fullname" $forgejoVals }}-http.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.forgejo.service.http.port }}
        - name: runner-config-generation
          image: "{{ include "gitea.actions.image" . }}"
          imagePullPolicy: {{ default .Values.forgejo.image.pullPolicy .Values.actions.runner.image.pullPolicy }}
          command:
            - forgejo-runner
            - create-runner-file
            - "--instance"
            - $(FORGEJO_INSTANCE_URL)
            - "--secret"
            - $(RUNNER_SECRET)
            - "--connect"
          env:
            - name: RUNNER_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.actions.runner.existingSecret }}
                  key: token
            - name: FORGEJO_INSTANCE_URL
              value: http://{{ include "gitea.fullname" $forgejoVals }}-http.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.forgejo.service.http.port }}
          resources:
            limits:
              cpu: "0.50"
              memory: "64Mi"
          volumeMounts:
            - name: runner-data
              mountPath: /data
      terminationGracePeriodSeconds: {{ .Values.forgejo.deployment.terminationGracePeriodSeconds }}
      containers:
        - name: runner
          image: "{{ include "gitea.actions.image" . }}"
          imagePullPolicy: {{ default .Values.forgejo.image.pullPolicy .Values.actions.runner.image.pullPolicy }}
          command:
            - sh
          args:
            - -c
            - |
              while ! nc -z localhost 2376 </dev/null; do
                echo 'waiting for docker daemon...';
                sleep 5;
              done;
              /bin/forgejo-runner daemon --config config.yaml
          env:
            - name: DOCKER_HOST
              value: tcp://localhost:2376
            - name: DOCKER_CERT_PATH
              value: /certs/client
            - name: DOCKER_TLS_VERIFY
              value: "1"
          volumeMounts:
            - name: docker-certs
              mountPath: /certs
            - name: runner-data
              mountPath: /data
            - name: config
              mountPath: /data/config.yaml
              subPath: "config.yaml"
        - name: daemon
          image: docker:23.0.6-dind-rootless
          env:
            - name: DOCKER_TLS_CERTDIR
              value: /certs
          # NOTE: the container needs to run as root to configure dockerd, but
          # dockerd itself is NOT run as root
          securityContext:
            privileged: true
          volumeMounts:
            - name: docker-certs
              mountPath: /certs
      {{- with .Values.forgejo.global.hostAliases }}
      hostAliases:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.forgejo.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.forgejo.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.forgejo.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.forgejo.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.forgejo.dnsConfig }}
      dnsConfig:
        {{- toYaml .Values.forgejo.dnsConfig | nindent 8 }}
      {{- end }}
      volumes:
        - name: docker-certs
          emptyDir: {}
        - name: runner-data
          emptyDir: {}
        - name: config
          configMap:
            name: forgejo-runner-config
{{- end }}
