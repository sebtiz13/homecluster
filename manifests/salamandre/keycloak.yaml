apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: keycloak
  namespace: argocd
spec:
  project: cluster-core-apps
  source:
    repoURL: https://charts.bitnami.com/bitnami
    chart: keycloak
    targetRevision: 10.1.4
    plugin:
      name: argocd-vault-plugin-helm
      env:
        - name: HELM_VALUES
          value: |
            fullnameOverride: "keycloak"
            priorityClassName: system-cluster-critical

            proxy: edge
            ingress:
              enabled: true
              ingressClassName: traefik
              hostname: ${url}
              annotations:
                traefik.ingress.kubernetes.io/router.entrypoints: websecure
              extraTls:
                - secretName: ${tls_secret_name}
                  hosts:
                    - ${url}

            cache:
              enabled: true

            auth:
              adminUser: <path:argocd/data/keycloak/auth#adminUser>
              adminPassword: <path:argocd/data/keycloak/auth#adminPassword>

            extraEnvVars:
              - name: TZ
                value: Europe/Paris
              - name: KEYCLOAK_PRODUCTION
                value: "true"
              - name: KEYCLOAK_HOSTNAME
                value: https://${url}

            service:
              type: ClusterIP

            externalDatabase:
              host: <path:argocd/data/keycloak/database#host>
              port: <path:argocd/data/keycloak/database#port>
              user: <path:argocd/data/keycloak/database#user>
              database: <path:argocd/data/keycloak/database#database>
              password: <path:argocd/data/keycloak/database#password>

            postgresql:
              enabled: false

            keycloakConfigCli:
              enabled: true
              # Load old tool version due to unreleased cli (issue https://github.com/bitnami/charts/issues/12699)
              command:
                - java
                - -jar
                - /opt/bitnami/keycloak-config-cli/keycloak-config-cli-19.0.1.jar

              configuration:
                realm1.yaml: |
                  id: developer
                  realm: developer
                  enabled: true
                  registrationAllowed: false
                  registrationEmailAsUsername: false
                  roles:
                    realm:
                      - name: editor
                        composite: false
                        clientRole: false
                        containerId: developer
                        attributes: {}
                      - name: admin
                        description: '$$${role_admin}'
                        composite: false
                        clientRole: false
                        containerId: developer
                        attributes: {}
                    client:
                      argocd: []
                      argocd-cli: []
                      vault: []
                  groups:
                    - name: Admin
                      path: /Admin
                      attributes:
                        policy:
                          - consoleAdmin
                      realmRoles:
                        - editor
                        - admin
                      clientRoles: {}
                      subGroups: []
                    - name: Operator
                      path: /Operator
                      attributes:
                        policy:
                          - readwrite
                      realmRoles:
                        - editor
                      clientRoles: {}
                      subGroups: []
                    - name: Users
                      path: /Users
                      attributes: {}
                      realmRoles: []
                      clientRoles: {}
                      subGroups: []
                  users:
                    - username: test
                      email: test@test.com
                      firstName: test
                      lastName: test
                      enabled: true
                      emailVerified: true
                      credentials:
                        - type: password
                          userLabel: initial
                          value: test
                      realmRoles:
                        - default-roles-developer
                        - admin
                      groups:
                        - Admin
                  clients:
                    - clientId: argocd
                      rootUrl: https://${argocd_url}
                      baseUrl: /
                      enabled: true
                      publicClient: false
                      clientAuthenticatorType: client-secret
                      secret: ${argocd_secret}
                      redirectUris:
                        - https://${argocd_url}
                        - /applications
                        - /auth/callback
                      webOrigins:
                        - /ui/vault/auth
                      standardFlowEnabled: true
                      directAccessGrantsEnabled: true
                      protocol: openid-connect
                      attributes:
                        backchannel.logout.session.required: "true"
                      fullScopeAllowed: true
                      defaultClientScopes:
                        - web-origins
                        - profile
                        - roles
                        - groups
                        - email
                      optionalClientScopes:
                        - address
                        - phone
                        - offline_access
                        - microprofile-jwt
                    - clientId: argocd-cli
                      rootUrl: http://localhost:8085
                      adminUrl: http://localhost:8085
                      enabled: true
                      clientAuthenticatorType: client-secret
                      redirectUris:
                        - http://localhost:8085/*
                      webOrigins:
                        - http://localhost:8085
                      standardFlowEnabled: true
                      directAccessGrantsEnabled: true
                      publicClient: true
                      protocol: openid-connect
                      attributes:
                        backchannel.logout.session.required: "true"
                      fullScopeAllowed: true
                      defaultClientScopes:
                        - web-origins
                        - profile
                        - roles
                        - groups
                        - email
                      optionalClientScopes:
                        - address
                        - phone
                        - offline_access
                        - microprofile-jwt
                    - clientId: vault
                      rootUrl: https://${vault_url}
                      baseUrl: /ui/
                      adminUrl: /ui/vault/auth/oidc/oidc/callback
                      enabled: true
                      publicClient: false
                      clientAuthenticatorType: client-secret
                      secret: ${vault_secret}
                      redirectUris:
                        - /oidc/callback
                        - /ui/vault/auth/oidc/oidc/callback/*
                        - http://localhost:8250/oidc/callback
                      webOrigins:
                        - /ui/vault/auth
                      standardFlowEnabled: true
                      directAccessGrantsEnabled: true
                      protocol: openid-connect
                      attributes:
                        backchannel.logout.session.required: "true"
                      fullScopeAllowed: true
                      defaultClientScopes:
                        - web-origins
                        - profile
                        - roles
                        - groups
                        - email
                      optionalClientScopes:
                        - address
                        - phone
                        - offline_access
                        - microprofile-jwt
                    - clientId: gitlab
                      rootUrl: https://${gitlab_url}
                      baseUrl: /
                      enabled: true
                      publicClient: false
                      clientAuthenticatorType: client-secret
                      secret: ${gitlab_secret}
                      redirectUris:
                        - /*
                      webOrigins:
                        - '*'
                      standardFlowEnabled: true
                      directAccessGrantsEnabled: true
                      protocol: openid-connect
                      attributes:
                        backchannel.logout.session.required: "true"
                      fullScopeAllowed: true
                      defaultClientScopes:
                        - web-origins
                        - profile
                        - roles
                        - email
                      optionalClientScopes:
                        - address
                        - phone
                        - offline_access
                        - microprofile-jwt
                  clientScopes:
                    - name: groups
                      protocol: openid-connect
                      attributes:
                        include.in.token.scope: "true"
                        display.on.consent.screen: "true"
                      protocolMappers:
                        - name: groups
                          protocol: openid-connect
                          protocolMapper: oidc-group-membership-mapper
                          consentRequired: false
                          config:
                            full.path: "false"
                            id.token.claim: "true"
                            access.token.claim: "true"
                            claim.name: groups
                            userinfo.token.claim: "true"
                    - name: policies
                      protocol: openid-connect
                      attributes:
                        include.in.token.scope: "true"
                        display.on.consent.screen: "true"
                      protocolMappers:
                        - name: policy
                          protocol: openid-connect
                          protocolMapper: oidc-usermodel-attribute-mapper
                          consentRequired: false
                          config:
                            userinfo.token.claim: "true"
                            user.attribute: policy
                            id.token.claim: "true"
                            access.token.claim: "true"
                            claim.name: policy
                            jsonType.label: String
                  attributes:
                    frontendUrl: "https://${url}"
  destination:
    server: https://kubernetes.default.svc
    namespace: keycloak
  syncPolicy:
    syncOptions:
      - CreateNamespace=true
    automated:
      prune: true
      selfHeal: true
