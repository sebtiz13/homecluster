- name: Write application secrets # noqa: var-naming[no-role-prefix]
  when: secrets | length > 0
  delegate_to: localhost
  ansible.builtin.import_role:
    name: vault_secrets
    # ? secrets passed from role

- name: Deploy application manifest
  delegate_to: localhost
  kubernetes.core.k8s:
    kubeconfig: "{{ hostvars.salamandre.local_kubeconfig }}"
    state: present
    resource_definition: "{{ manifest }}"
    namespace: "{{ hostvars.salamandre.argocd_namespace }}"
  register: argocd_manifest

# - name: Remove ast-applied-configuration in external secrets
#   when:
#     - vault_secret is changed
#     - refresh_es | length > 0
#   delegate_to: "{{ inventory_hostname }}"
#   ansible.builtin.shell: >-
#     kubectl annotate externalsecret
#     -n '{{ manifest.spec.destination.namespace }}' '{{ item }}'
#     kubectl.kubernetes.io/last-applied-configuration- >/dev/null
#   changed_when: true
#   loop: "{{ refresh_es }}"
- name: Update application external secrets # noqa: no-handler
  when: vault_secret is changed
  kubernetes.core.k8s:
    state: patched
    kubeconfig: "{{ local_kubeconfig }}"
    api_version: external-secrets.io/v1beta1
    kind: ExternalSecret
    name: "{{ item }}"
    namespace: "{{ manifest.spec.destination.namespace }}"
    definition:
      metadata:
        annotations:
          force-sync: "{{ ansible_date_time.epoch }}"
  loop: "{{ refresh_es | default([]) }}"

- name: Check existing application resources
  when:
    - argocd_manifest is not changed
    - vault_secret is changed
  delegate_to: localhost
  kubernetes.core.k8s_info:
    kubeconfig: "{{ local_kubeconfig }}"
    kind: "{{ item.kind }}"
    name: "{{ item.name }}"
    namespace: "{{ manifest.spec.destination.namespace }}"
  register: app_resource
  loop: "{{ restart_resources | default([]) }}"
  loop_control:
    label: "{{ item.kind }}/{{ item.name }}"
- name: Restart application resources for update secrets
  when: # This bellow conditions prevent restart resources if not exist
    - item is not skipped
    - item is succeeded
    - item.resources | length > 0
  delegate_to: "{{ inventory_hostname }}"
  vars:
    cmd_args: "-n '{{ manifest.spec.destination.namespace }}' '{{ item.item.kind }}/{{ item.item.name }}'"
  ansible.builtin.shell: >-
    kubectl rollout restart {{ cmd_args }} >/dev/null &&
    kubectl rollout status {{ cmd_args }} >/dev/null
  changed_when: false
  loop: "{{ app_resource.results }}"
  loop_control:
    label: "{{ item.item.kind }}/{{ item.item.name }}"

- name: Wait until application is ready
  when: argocd_manifest is changed or vault_secret is changed
  kubernetes.core.k8s_info:
    kubeconfig: "{{ local_kubeconfig }}"
    api_version: '{{ item.api_version | default("") }}'
    kind: "{{ item.kind }}"
    name: "{{ item.name }}"
    namespace: "{{ manifest.spec.destination.namespace }}"
    wait: true
  loop: "{{ wait_resources | default([]) }}"
  loop_control:
    label: "{{ item.kind }}/{{ item.name }}"
  register: argocd_refresh
