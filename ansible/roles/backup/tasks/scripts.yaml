- name: Create folder for backup excutables
  ansible.builtin.file:
    state: directory
    path: "{{ exec_dir }}"
    mode: "u=rwx,g=rx,o=rx"

- name: Create folder for backup task log
  ansible.builtin.file:
    state: directory
    path: /var/log/backup-cluster
    owner: backup
    group: backup
    mode: "u=rwx,g=rwx,o=rx"

- name: Create folder for backup script
  ansible.builtin.file:
    state: directory
    path: /var/backups/cluster
    owner: backup
    group: backup
    mode: "u=rwx,g=rx,o=rx"

- name: Allow snapshot and send on ZFS pool for backup user
  ansible.builtin.command: zfs allow backup snapshot,send {{ zfs_pool.name | default('data') }}
  register: result_allow
  changed_when: false
  failed_when: result_allow.stderr != ''

- name: Configure mail to root for backup cron
  community.general.cronvar:
    user: backup
    cron_file: backup-cluster
    name: MAILTO
    value: root

- name: Configure cron task for backup
  ansible.builtin.cron:
    user: backup
    cron_file: backup-cluster
    name: backup cluster
    job: '[ -x {{ exec_dir }}/backup.sh ] && {{ exec_dir }}/backup.sh > /var/log/backup-cluster/backup-$(date +\%U_\%Y-\%m-\%d_\%H-\%M-\%S).log 2>&1'
    minute: "0"
    hour: "2"
    disabled: "{{ env == 'dev' }}"

- name: Upload backup script
  vars:
    keep_weeks: 2
    mc_bucket: "baku/{{ backup_s3.data.data.data.bucket }}"
    backup_dir: /var/backups/cluster
  ansible.builtin.template:
    dest: "{{ exec_dir }}/backup.sh"
    src: scripts/backup.sh
    mode: "u=rwx,g=rx,o=rx"
    backup: true

- name: Upload restore script
  ansible.builtin.copy:
    dest: "{{ exec_dir }}/restore.sh"
    src: scripts/restore.sh
    mode: "u=rwx,g=rx,o=rx"

- name: Upload barman restore script
  ansible.builtin.copy:
    dest: "{{ exec_dir }}/barman-restore.sh"
    src: scripts/barman-restore.sh
    mode: "u=rwx,g=rx,o=rx"
