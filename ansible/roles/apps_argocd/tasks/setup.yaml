- name: Create application namespace
  kubernetes.core.k8s:
    kubeconfig: "{{ local_kubeconfig }}"
    state: present
    resource_definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ apps_argocd.namespace }}"
        labels:
          domain: "{{ root_domain }}"

- name: Add chart repo
  kubernetes.core.helm_repository:
    name: argo-cd
    repo_url: "{{ apps_argocd._manifest.spec.source.repoURL }}"

- name: Retrieve appVersion
  vars:
    chart: "argo-cd/{{ apps_argocd._manifest.spec.source.chart }}"
    version: "{{ apps_argocd._manifest.spec.source.targetRevision }}"
  ansible.builtin.shell: |
    set -o pipefail
    helm repo update argo-cd > /dev/null
    helm search repo '{{ chart }}' --version '{{ version }}' -o json | jq -r '.[0].app_version'
  changed_when: false
  register: argocd_app_version

- name: Download ArgoCD CRDs
  vars:
    base_url: "https://raw.githubusercontent.com/argoproj/argo-cd/{{ argocd_app_version.stdout }}/manifests/crds"
  ansible.builtin.uri:
    url: "{{ base_url }}/{{ item }}-crd.yaml"
    method: GET
    return_content: true
    status_code: 200
  register: argocd_crds
  loop:
    - application
    - applicationset
    - appproject
- name: Deploy patched ArgoCD CRDs
  vars:
    metadata_patch:
      metadata:
        labels:
          app.kubernetes.io/managed-by: Helm
        annotations:
          meta.helm.sh/release-namespace: "{{ apps_argocd.namespace }}"
          meta.helm.sh/release-name: "{{ apps_argocd.release_name }}"
    manifest: "{{ item.content | from_yaml | combine(metadata_patch, recursive=True) }}"
  kubernetes.core.k8s:
    kubeconfig: "{{ local_kubeconfig }}"
    state: present
    resource_definition: "{{ manifest }}"
  loop: "{{ argocd_crds.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: Download ExternalSecret CRDs
  ansible.builtin.uri:
    url: "https://raw.githubusercontent.com/external-secrets/external-secrets/v{{ apps_external_secrets.version }}/config/crds/bases/external-secrets.io_{{ item }}.yaml"
    method: GET
    return_content: true
    status_code: 200
  register: es_crds
  loop:
    - externalsecrets
    - pushsecrets
- name: Deploy patched ExternalSecret CRDs
  vars:
    metadata_patch:
      metadata:
        labels:
          app.kubernetes.io/managed-by: Helm
        annotations:
          meta.helm.sh/release-namespace: "{{ apps_external_secrets.namespace }}"
          meta.helm.sh/release-name: "{{ apps_external_secrets.release_name }}"
    manifest: "{{ item.content | from_yaml | combine(metadata_patch, recursive=True) }}"
  kubernetes.core.k8s:
    kubeconfig: "{{ local_kubeconfig }}"
    state: present
    resource_definition: "{{ manifest }}"
  loop: "{{ es_crds.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: Download cert-manager CRD
  ansible.builtin.uri:
    url: "https://raw.githubusercontent.com/cert-manager/cert-manager/v{{ apps_cert_manager.version }}/deploy/crds/crd-certificates.yaml"
    method: GET
    return_content: true
    status_code: 200
  register: cm_crd
- name: Deploy patched cert-manager CRD
  vars:
    metadata_patch:
      metadata:
        labels:
          app: cert-manager
          app.kubernetes.io/name: cert-manager
          app.kubernetes.io/instance: "{{ apps_cert_manager.release_name }}"
          app.kubernetes.io/managed-by: Helm
        annotations:
          meta.helm.sh/release-namespace: "{{ apps_cert_manager.namespace }}"
          meta.helm.sh/release-name: "{{ apps_cert_manager.release_name }}"
    manifest: "{{ cm_crd.content | from_yaml | combine(metadata_patch, recursive=True) }}"
  kubernetes.core.k8s:
    kubeconfig: "{{ local_kubeconfig }}"
    state: present
    resource_definition: "{{ manifest }}"
