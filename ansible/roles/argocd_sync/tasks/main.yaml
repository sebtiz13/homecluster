- name: Sync ArgoCD application
  kubernetes.core.k8s:
    kubeconfig: "{{ local_kubeconfig }}"
    state: present
    resource_definition: "{{ apps_argocd._manifest }}"
    namespace: "{{ apps_argocd.namespace }}"
  register: argocd_manifest

- name: Create ArgoCD OIDC access # noqa: var-naming[no-role-prefix]
  tags: oidc
  ansible.builtin.include_role:
    name: oidc_access
  vars:
    secret_path: argocd/oidc
    project_id: "{{ zitadel_dev_project_id }}"
    app_name: ArgoCD
    redirect_uris:
      - "{{ apps_argocd.host }}/auth/callback"
      - http://localhost:8085/*
    post_logout_redirect_uris:
      - "{{ apps_argocd.host }}"
    response_types:
      - OIDC_RESPONSE_TYPE_CODE
    grant_types:
      - OIDC_GRANT_TYPE_AUTHORIZATION_CODE
      - OIDC_GRANT_TYPE_REFRESH_TOKEN
    auth_method_type: OIDC_AUTH_METHOD_TYPE_BASIC

# TODO: improve refresh app
- name: Refresh ArgoCD application
  when:
    - argocd_manifest is not changed
  vars:
    app_name: "{{ apps_argocd._manifest.metadata.name }}"
  ansible.builtin.uri:
    url: "{{ argocd_api_url }}/applications/{{ app_name }}?refresh=hard"
    headers:
      Authorization: "Bearer {{ argocd_api_token }}"
    method: GET
    status_code: 200

- name: Restart ArgoCD server for update oidc
  delegate_to: "{{ inventory_hostname }}"
  ansible.builtin.command: |
    kubectl rollout restart deployment
      --namespace '{{ apps_argocd.namespace }}'
      '{{ apps_argocd.release_name }}-server'
  changed_when: false

- name: Wait until application is available
  kubernetes.core.k8s_info:
    kubeconfig: "{{ local_kubeconfig }}"
    kind: Deployment
    name: "{{ apps_argocd.release_name }}-server"
    namespace: "{{ apps_argocd.namespace }}"
    wait: true
    wait_sleep: 10
    wait_timeout: 360
