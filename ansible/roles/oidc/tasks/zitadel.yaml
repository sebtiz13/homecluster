- name: Zitadel | Store masterkey
  no_log: true
  ansible.builtin.uri:
    url: "{{ vault_api_url }}/salamandre/data/zitadel/masterkey"
    method: POST
    status_code:
      - 204 # When successfull
      - 200 # When warning
    body_format: json
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
    body:
      data:
        value: "{{ lookup('file', credentials_folder + '/zitadel_masterkey') }}"
- name: Zitadel | Create database access # noqa: var-naming[no-role-prefix]
  ansible.builtin.include_role:
    name: database_access
  vars:
    database: zitadel
    username: zitadel
    password: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_letters', 'digits']) }}"
    secret_path: salamandre/data/zitadel/database

- name: External-secrets | Force sync secrets
  delegate_to: localhost
  kubernetes.core.k8s:
    state: patched
    kubeconfig: "{{ local_kubeconfig }}"
    api_version: external-secrets.io/v1beta1
    kind: ExternalSecret
    name: "{{ item }}"
    namespace: "{{ apps_zitadel.namespace }}"
    definition:
      metadata:
        annotations:
          force-sync: "{{ ansible_date_time.epoch }}"
  loop:
    - zitadel-credentials
    - zitadel-masterkey

- name: Zitadel | Retrieve server service
  delegate_to: localhost
  kubernetes.core.k8s_info:
    kubeconfig: "{{ local_kubeconfig }}"
    kind: Service
    name: "{{ apps_zitadel.release_name }}"
    namespace: "{{ apps_zitadel.namespace }}"
    wait: true
  register: server
- name: Zitadel | Store server url
  ansible.builtin.set_fact:
    zitadel_internal_url: "http://{{ server.resources.0.spec.clusterIP }}:{{ server.resources.0.spec.ports.0.port }}"

- name: Zitadel | Wait until application is available
  ansible.builtin.uri:
    url: "{{ zitadel_internal_url }}/debug/ready"
    method: GET
    status_code: 200
  register: health
  until: health.status == 200

##
# Retrieve console token
##
- name: Zitadel | Retrieve console key
  delegate_to: localhost
  kubernetes.core.k8s_info:
    kubeconfig: "{{ local_kubeconfig }}"
    kind: Secret
    name: "{{ apps_zitadel.release_name }}-admin-sa"
    namespace: "{{ apps_zitadel.namespace }}"
    wait: true
  register: zitadel_admin_key
- name: Zitadel | Generate console JWT token
  delegate_to: localhost
  vars:
    key: "{{ zitadel_admin_key.resources.0.data[apps_zitadel.release_name + '-admin-sa.json'] | b64decode }}"
    payload:
      iss: "{{ key.userId }}"
      sub: "{{ key.userId }}"
      aud: "{{ external_urls.zitadel }}"
    expire: 1hr
  ansible.builtin.shell: |-
    echo "{{ key.key }}" > /tmp/zitadel.pem
    {{ bin_dir }}/jwt encode --no-typ --alg=RS256 --kid={{ key.keyId }} \
      --exp="{{ expire }}" --secret=@/tmp/zitadel.pem -- '{{ payload | to_json }}'
    rm /tmp/zitadel.pem &> /dev/null
  register: zitadel_console_jwt
  changed_when: false
  failed_when: zitadel_console_jwt.stderr != ''
- name: Zitadel | Retrieve console token
  ansible.builtin.uri:
    url: "{{ zitadel_internal_url }}/oauth/v2/token"
    method: POST
    headers:
      Host: "{{ apps_zitadel.domain_name }}"
    return_content: true
    status_code: 200
    body_format: form-urlencoded
    body:
      grant_type: urn:ietf:params:oauth:grant-type:jwt-bearer
      scope: "openid urn:zitadel:iam:org:project:id:zitadel:aud"
      assertion: "{{ zitadel_console_jwt.stdout }}"
  register: zitadel_console_token
- name: Zitadel | Store console token
  ansible.builtin.set_fact:
    zitadel_console_token: "{{ zitadel_console_token.json.access_token }}"
