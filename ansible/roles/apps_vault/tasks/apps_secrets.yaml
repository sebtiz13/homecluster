- name: Fill OVH credentials (prod)
  no_log: true
  when: env == 'production'
  ansible.builtin.uri:
    url: "{{ vault_api_url }}/salamandre/data/cert-manager/ovh"
    method: POST
    status_code:
      - 204 # When successfull
      - 200 # When warning
    body_format: json
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
    body:
      data:
        applicationKey: "{{ cert_manager_ovh_auth.application_key }}"
        applicationSecret: "{{ cert_manager_ovh_auth.application_secret }}"
        consumerKey: "{{ cert_manager_ovh_auth.consumer_key }}"

- name: Fill SMTP credentials
  no_log: true
  ansible.builtin.uri:
    url: "{{ vault_api_url }}/salamandre/data/smtp"
    method: POST
    status_code:
      - 204 # When successfull
      - 200 # When warning
    body_format: json
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
    body:
      data: "{{ smtp_auth }}"

- name: Fill DB super user credentials
  vars:
    secret_path: salamandre/data/db-super-user
  block:
    - name: Check if DB super user exist
      no_log: true
      ansible.builtin.uri:
        url: "{{ vault_api_url }}/{{ secret_path }}"
        method: GET
        status_code:
          - 200 # When successfull
          - 204 # When warning
          - 404 # When is not created
        headers:
          X-Vault-Token: "{{ vault_root_token }}"
      register: vault_check

    - name: Fill DB super user credentials
      when: vault_check.status == 404
      no_log: true
      ansible.builtin.uri:
        url: "{{ vault_api_url }}/{{ secret_path }}"
        method: POST
        status_code:
          - 204 # When successfull
          - 200 # When warning
        body_format: json
        headers:
          X-Vault-Token: "{{ vault_root_token }}"
        body:
          data:
            username: postgres
            password: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_letters', 'digits']) }}"

- name: Fill backup informations
  vars:
    secret_path: salamandre/data/backup/s3
  block:
    - name: Check if backup informations exist
      no_log: true
      ansible.builtin.uri:
        url: "{{ vault_api_url }}/{{ secret_path }}"
        method: GET
        status_code:
          - 200 # When successfull
          - 204 # When warning
          - 404 # When is not created
        headers:
          X-Vault-Token: "{{ vault_root_token }}"
      register: vault_check

    - name: Fill backup informations
      when: vault_check.status == 404
      no_log: true
      ansible.builtin.uri:
        url: "{{ vault_api_url }}/{{ secret_path }}"
        method: POST
        status_code:
          - 204 # When successfull
          - 200 # When warning
        body_format: json
        headers:
          X-Vault-Token: "{{ vault_root_token }}"
        body:
          data:
            endpoint: "{{ external_urls.baku_minio }}"
            region: minio
            accessKey: salamandre-backup
            secretKey: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_letters', 'digits'], length=40) }}"
            bucketPvc: backup-salamandre-pvc
