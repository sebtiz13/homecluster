- name: Minio | Retrieve application informations
  vars:
    manifest: "{{ lookup('file', manifests_folder + '/minio.yaml') | from_yaml }}"
    release_name: "{{ manifest.spec.source.plugin.env.0.value }}"
    namespace: "{{ manifest.spec.destination.namespace }}"
  ansible.builtin.set_fact:
    apps_minio:
      _manifest: "{{ manifest }}"
      endpoint: "{{ release_name }}.{{ namespace }}.svc.cluster.local:9000"
      host: "{{ manifest.metadata.annotations['sebtiz13.fr/host'] }}"
      region: "minio"

- name: Minio | Deploy application and secrets # noqa: var-naming[no-role-prefix]
  ansible.builtin.include_role:
    name: argocd_app
  vars:
    manifest: "{{ apps_minio._manifest }}"
    restart_resources:
      - kind: Deployment
        name: "{{ apps_minio._manifest.spec.source.plugin.env.0.value }}"
    secrets:
      - path: minio/auth
        data:
          rootUser: admin
          rootPassword: "{{ admin_passwords.minio }}"

- name: Minio | Wait until is available
  ansible.builtin.uri:
    url: "https://{{ apps_minio.host }}/minio/health/live"
    validate_certs: false
    method: GET
    status_code: 200
    return_content: true
  register: minio_health
  until: minio_health.status == 200
  retries: 30 # This is for wait max 2.5min
  delay: 5

- name: Minio | Update service accounts secret key
  when: argocd_refresh is not skipped
  no_log: true
  vars:
    result: "Edited service account `{{ item.key }}` successfully."
  ansible.builtin.shell: >
    MC_HOST_minio=https://admin:{{ admin_passwords.minio }}@{{ apps_minio.host }}
    {{ bin_dir }}/mc admin user svcacct edit --secret-key="{{ item.value }}" minio {{ item.key }}
  register: minio_svcacct
  changed_when: result in minio_svcacct.stdout
  loop: "{{ apps_minio.svcacctSecretKeys | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
