- name: Vault | Create oidc access # noqa: var-naming[no-role-prefix]
  ansible.builtin.include_role:
    name: oidc_access
  vars:
    secret_path: salamandre/data/vault/oidc
    project_id: "{{ zitadel_dev_project_id }}"
    app_name: Vault
    redirect_uris:
      - "{{ external_urls.vault }}/oidc/callback"
      - "{{ external_urls.vault }}/ui/vault/auth/oidc/oidc/callback"
    post_logout_redirect_uris:
      - "{{ external_urls.vault }}"
    response_types:
      - OIDC_RESPONSE_TYPE_CODE
    grant_types:
      - OIDC_GRANT_TYPE_AUTHORIZATION_CODE
      - OIDC_GRANT_TYPE_REFRESH_TOKEN
    auth_method_type: OIDC_AUTH_METHOD_TYPE_BASIC

- name: Vault | Create policies for oidc
  ansible.builtin.uri:
    url: "{{ hostvars.salamandre.vault_api_url }}/sys/policy/{{ item }}"
    method: POST
    status_code:
      - 204 # When successfull
      - 200 # When warning
    body_format: json
    headers:
      X-Vault-Token: "{{ hostvars.salamandre.vault_root_token }}"
    body:
      policy: "{{ lookup('ansible.builtin.file', './' + item + '.hcl') }}"
  loop:
    - reader
    - admin
    - operator

- name: Vault | Enable oidc auth
  delegate_to: localhost
  kubernetes.core.k8s_exec:
    kubeconfig: "{{ local_kubeconfig }}"
    namespace: "{{ apps_vault.namespace }}"
    pod: "{{ apps_vault.pod_name }}"
    command: |-
      /bin/sh -c 'export VAULT_TOKEN={{ vault_root_token | quote }}
      vault auth enable oidc'
  register: vault_cmd
  changed_when: vault_cmd.rc == 0
  failed_when:
    - vault_cmd.rc != 0
    - not "path is already in use at" in vault_cmd.stderr

- name: Vault | Configure access for oidc auth (dev)
  when: env == 'dev'
  ansible.builtin.uri:
    url: "{{ vault_api_url }}/auth/oidc/config"
    method: POST
    status_code:
      - 204 # When successfull
      - 200 # When warning
    body_format: json
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
    body:
      oidc_discovery_url: "{{ external_urls.zitadel }}"
      oidc_discovery_ca_pem: "{{ lookup('ansible.builtin.file', ca.cert) }}"
      oidc_client_id: "{{ oidc.client_id }}"
      oidc_client_secret: "{{ oidc.client_secret }}"
      default_role: reader
- name: Vault | Configure access for oidc auth (prod)
  when: env == 'production'
  ansible.builtin.uri:
    url: "{{ vault_api_url }}/auth/oidc/config"
    method: POST
    status_code:
      - 204 # When successfull
      - 200 # When warning
    body_format: json
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
    body:
      oidc_discovery_url: "{{ external_urls.zitadel }}"
      oidc_client_id: "{{ oidc.client_id }}"
      oidc_client_secret: "{{ oidc.client_secret }}"
      default_role: reader

- name: Vault | Create reader oidc role
  ansible.builtin.uri:
    url: "{{ vault_api_url }}/auth/oidc/role/reader"
    method: POST
    status_code:
      - 204 # When successfull
      - 200 # When warning
    body_format: json
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
    body:
      bound_audiences: "{{ oidc.client_id }}"
      allowed_redirect_uris:
        - "{{ external_urls.vault }}/ui/vault/auth/oidc/oidc/callback"
        - http://localhost:8200/oidc/callback
      user_claim: sub
      groups_claim: groups
      token_policies:
        - default
        - reader

- name: Vault | Create identity groups
  ansible.builtin.uri:
    url: "{{ vault_api_url }}/identity/group"
    method: POST
    status_code:
      - 204 # When successfull
      - 200 # When warning
    body_format: json
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
    body:
      name: "{{ item.name }}"
      policies: "{{ item.policies }}"
      type: external
  register: vault_identity_n
  changed_when:
    - "'json' in vault_identity_n"
    - "'data' in vault_identity_n.json"
  loop_control:
    label: "{{ item.name }}"
  loop:
    - name: operator
      policies:
        - operator
    - name: admin
      policies:
        - operator
        - admin

- name: Vault | Retrieve identity groups
  ansible.builtin.uri:
    url: "{{ vault_api_url }}/identity/group/name/{{ item }}"
    method: GET
    status_code:
      - 204 # When successfull
      - 200 # When warning
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
  register: vault_identity
  loop_control:
    label: "{{ item }}"
  loop:
    - operator
    - admin

- name: Vault | Retrieve auth methods
  ansible.builtin.uri:
    url: "{{ vault_api_url }}/sys/auth"
    method: GET
    status_code:
      - 204 # When successfull
      - 200 # When warning
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
  register: vault_auths

- name: Vault | Create identity group alias # noqa: no-handler
  ansible.builtin.uri:
    url: "{{ vault_api_url }}/identity/group-alias"
    method: POST
    status_code:
      - 204 # When successfull
      - 200 # When warning
    body_format: json
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
    body:
      name: "{{ item.item }}"
      mount_accessor: "{{ vault_auths.json.data['oidc/'].accessor }}"
      canonical_id: "{{ item.json.data.id }}"
  register: vault_identity_alias
  failed_when:
    - "vault_identity_alias.status != 204 and vault_identity_alias.status != 200"
    - "('json' not in vault_identity_alias) or (vault_identity_alias.json.errors.0 != 'combination of mount and group alias name is already in use')"
  loop_control:
    label: "{{ item.item }}"
  loop: "{{ vault_identity.results }}"
