- name: Check if zitadel application exist
  ansible.builtin.uri:
    url: "{{ zitadel_internal_url }}/management/v1/projects/{{ project_id }}/apps/_search"
    method: POST
    headers:
      Host: "{{ apps_zitadel.domain_name }}"
      Authorization: "Bearer {{ zitadel_console_token }}"
    status_code: 200
    return_content: true
    body_format: json
    body:
      query:
        limit: 1
      queries:
        - nameQuery:
            name: "{{ app_name }}"
            method: TEXT_QUERY_METHOD_EQUALS
  register: zitadel_app

- name: Create zitadel application
  when: zitadel_app.json.result is not defined
  ansible.builtin.uri:
    url: "{{ zitadel_internal_url }}/management/v1/projects/{{ project_id }}/apps/oidc"
    method: POST
    headers:
      Host: "{{ apps_zitadel.domain_name }}"
      Authorization: "Bearer {{ zitadel_console_token }}"
    status_code: 200
    return_content: true
    body_format: json
    body:
      name: "{{ app_name }}"
      redirectUris: "{{ redirect_uris | default([]) }}"
      responseTypes: "{{ response_types | default([]) }}"
      grantTypes: "{{ grant_types | default([]) }}"
      authMethodType: "{{ auth_method_type | default('OIDC_AUTH_METHOD_TYPE_BASIC') }}"
      postLogoutRedirectUris: "{{ post_logout_redirect_uris | default([]) }}"
      additionalOrigins: "{{ additional_origins | default([]) }}"
      idTokenRoleAssertion: true
      idTokenUserinfoAssertion: true
  register: zitadel_app_n
  changed_when: zitadel_app_n.status == 200
- name: Refresh zitadel oidc client secret
  when: zitadel_app.json.result is defined
  ansible.builtin.uri:
    url: "{{ zitadel_internal_url }}/management/v1/projects/{{ project_id }}/apps/{{ zitadel_app.json.result.0.id }}/oidc_config/_generate_client_secret"
    method: POST
    headers:
      Host: "{{ apps_zitadel.domain_name }}"
      Authorization: "Bearer {{ zitadel_console_token }}"
    status_code: 200
    return_content: true
    body_format: json
    body: {}
  register: zitadel_app_r
  changed_when: zitadel_app_r.status == 200

- name: Store temporary in fact
  ansible.builtin.set_fact:
    oidc:
      client_id: "{{ ((zitadel_app_n is changed) | ternary(zitadel_app_n.json, zitadel_app.json.result.0.oidcConfig)).clientId }}"
      client_secret: "{{ ((zitadel_app_n is changed) | ternary(zitadel_app_n, zitadel_app_r)).json.clientSecret }}"
- name: Store permanently in vault
  no_log: true
  ansible.builtin.uri:
    url: "{{ vault_api_url }}/{{ secret_path }}"
    method: POST
    status_code:
      - 204 # When successfull
      - 200 # When warning
    body_format: json
    headers:
      X-Vault-Token: "{{ vault_root_token }}"
    body:
      data:
        clientID: "{{ oidc.client_id }}"
        clientSecret: "{{ oidc.client_secret }}"
