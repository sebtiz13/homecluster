- name: Remove swapfile from /etc/fstab
  ansible.posix.mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  with_items:
    - swap
    - none

- name: Disable swap
  ansible.builtin.command: swapoff -a
  when: ansible_swaptotal_mb > 0
  changed_when: ansible_swaptotal_mb > 0

- name: Check if kubernetes is installed
  ansible.builtin.stat:
    path: /usr/local/bin/kubectl
  register: k3s_installed

- name: Retrieve installed k3s version
  when:
    - k3s_installed is not skipped
    - k3s_installed.stat.exists
  delegate_to: localhost
  become: false
  environment:
    KUBECONFIG: "{{ local_kubeconfig }}"
  kubernetes.core.k8s_cluster_info: {}
  register: k3s_installed_version
  failed_when:
    - "'msg' in k3s_installed_version"
    - "'Failed to load kubeconfig due to Invalid kube-config file. No configuration found.' not in k3s_installed_version.msg"

- name: Get k3s releases
  ansible.builtin.uri:
    url: https://update.k3s.io/v1-release/channels
    method: GET
    return_content: true
    status_code: 200
    body_format: json
  register: k3s_releases

- name: Retrieve wanted k3s version
  when:
    - k3s_releases is not skipped
    - k3s_releases is succeeded
    - k3s_releases.status == 200
  vars:
    k3s_release_query: "data[?name == '{{ k3s.channel | default('stable') }}'].latest"
    k3s_default_version: "{{ k3s_releases.json | community.general.json_query(k3s_release_query) | first }}"
  ansible.builtin.set_fact:
    k3s_versions:
      installed: "{{ k3s_installed_version.version.server.kubernetes.gitVersion | default('') }}"
      wanted: "{{ k3s.version | default(k3s_default_version) }}"

- name: Create k3s config directory
  when: k3s_versions.installed == ""
  ansible.builtin.file:
    path: /etc/rancher/k3s
    state: directory
    owner: root
    group: root
    mode: "u=rwx,g=rx,o=rx"
    recurse: true
- name: Configure k3s
  vars:
    default: "{{ lookup('ansible.builtin.template', './k3s_config.j2.yaml') | from_yaml }}"
    config: "{{ default | combine(k3s.config) }}"
  ansible.builtin.copy:
    dest: /etc/rancher/k3s/config.yaml
    content: "{{ config | to_yaml(indent=2) }}"
    owner: root
    group: root
    mode: "{{ config['write-kubeconfig-mode'] }}"

- name: Download k3s installer
  when: k3s_versions.wanted != k3s_versions.installed
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/k3s-io/k3s/{{ k3s_versions.wanted }}/install.sh
    dest: /tmp/k3s_install.sh
    mode: "0500"
    force: true
  register: k3s_install_file
- name: Install k3s # noqa: no-handler
  when: k3s_install_file is changed
  changed_when: true
  environment:
    INSTALL_K3S_VERSION: "{{ k3s_versions.wanted }}"
  ansible.builtin.command: sh {{ k3s_install_file.dest }} server {{ (k3s.flags | default([])) | join(" ") }}
  register: k3s_install

- name: Save kubeconfig locally # noqa: no-handler
  when: k3s_install is changed
  block:
    - name: Download kubeconfig
      ansible.builtin.fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "{{ local_kubeconfig }}"
        flat: true

    - name: Configure host on local kubeconfig
      delegate_to: localhost
      become: false
      ansible.builtin.lineinfile:
        path: "{{ local_kubeconfig }}"
        regexp: '^(.*server: https:\/\/)127\.0\.0\.1(:6443)$'
        line: '\1{{ k3s_domain | default(domain_name) }}\2'
        backrefs: true

    - name: Configure node name on local kubeconfig
      delegate_to: localhost
      become: false
      ansible.builtin.replace:
        path: "{{ local_kubeconfig }}"
        regexp: "default$"
        replace: "{{ inventory_hostname }}"

    - name: Fix kubeconfig mode
      delegate_to: localhost
      become: false
      ansible.builtin.file:
        path: "{{ local_kubeconfig }}"
        mode: "0600"

- name: Restart k3s # noqa: no-handler
  when: k3s_install is changed
  ansible.builtin.service:
    name: k3s
    state: restarted

- name: Wait node started
  delegate_to: localhost
  become: false
  kubernetes.core.k8s_info:
    kubeconfig: "{{ local_kubeconfig }}"
    kind: Node
    name: "{{ inventory_hostname }}"
    wait: true

- name: Retrieve api server info
  delegate_to: localhost
  become: false
  kubernetes.core.k8s_info:
    kubeconfig: "{{ local_kubeconfig }}"
    kind: Service
    name: kubernetes
    namespace: default
  register: k3s_apiserver
