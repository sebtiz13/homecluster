forgejo:
  gitea:
    admin:
      existingSecret: forgejo-admin-credentials
      email: admin@{{ .Values.baseDomain }}

    oauth:
      - name: zitadel
        existingSecret: forgejo-oidc-credentials
        provider: openidConnect
        autoDiscoverUrl: https://sso.{{ .Values.baseDomain }}/.well-known/openid-configuration

    config:
      indexer:
        ISSUE_INDEXER_TYPE: bleve
        REPO_INDEXER_ENABLED: true
      queue:
        TYPE: level
      openid:
        ENABLE_OPENID_SIGNIN: false
      oauth2_client:
        ENABLE_AUTO_REGISTRATION: true
        ACCOUNT_LINKING: auto
      service:
        DISABLE_REGISTRATION: false
        ENABLE_BASIC_AUTHENTICATION: false
        DEFAULT_KEEP_EMAIL_PRIVATE: true
        SHOW_REGISTRATION_BUTTON: false
        ALLOW_ONLY_EXTERNAL_REGISTRATION: true
      cache:
        ADAPTER: memory
      session:
        PROVIDER: db
      server:
        DOMAIN: {{ include "ingress.host" . }}

    additionalConfigSources:
      - secret:
          secretName: forgejo-app-ini-mail
      - secret:
          secretName: forgejo-app-ini-database
    additionalConfigFromEnvs:
      - name: TZ
        value: Europe/Paris

  strategy:
    type: Recreate

  ingress:
    enabled: true
    className: traefik
    annotations:
      {{ include "ingress.annotations.httpsRedirect" . | nindent 4 }}
    hosts:
      - host: {{ include "ingress.host" . }}
        paths:
          - path: /
            pathType: Prefix
    tls:
      - hosts:
          - {{ include "ingress.host" . }}

  persistence:
    enabled: true
    storageClass: openebs-zfspv
    size: 10Gi

# forgejo-runner:
#   fullnameOverride: forgejo-runner

#   runner:
#     config:
#       create: false
#       existingSecret: forgejo-runner

actions:
  runner:
    existingSecret: forgejo-runner

external-secrets:
  secrets:
    - name: admin-credentials
      target:
        template:
          type: Opaque
          data:
            username: '{{`{{ .adminUser }}`}}'
            password: '{{`{{ .adminPassword }}`}}'
      dataFrom:
        - extract:
            key: salamandre/forgejo/auth
    - name: oidc-credentials
      target:
        template:
          type: Opaque
          data:
            key: '{{`{{ .clientID }}`}}'
            secret: '{{`{{ .clientSecret }}`}}'
      dataFrom:
        - extract:
            key: salamandre/forgejo/oidc
    - name: runner
      target:
        template:
          type: Opaque
          data:
            token: '{{`{{ .token }}`}}'
            # .runner: |-
            #   {
            #     "WARNING": "This file is automatically generated by act-runner. Do not edit it manually unless you know what you are doing. Removing this file will cause act runner to re-register as a new runner.",
            #     "uuid": "{{`{{ .uuid }}`}}",
            #     "name": "{{`{{ .name }}`}}",
            #     "token": "{{`{{ .token }}`}}",
            #     "address": "http://forgejo-http.forgejo.svc:3000/"
            #   }
      dataFrom:
        - extract:
            key: salamandre/forgejo/runner
    {{/* app.ini */}}
    - name: app-ini-mail
      target:
        template:
          type: Opaque
          data:
            mailer: |-
              {{`ENABLED=true
              SMTP_ADDR={{ .host }}
              SMTP_PORT={{ .port }}`}}
            {{- if eq .Values.environment "prod" }}
              {{`USER={{ .username }}
              PASSWD={{ .password }}`}}
            {{- end }}
              FROM={{`{{ .username }}`}}
      dataFrom:
        - extract:
            key: salamandre/smtp
    - name: app-ini-database
      target:
        template:
          type: Opaque
          data:
            database: |-
              {{`DB_TYPE=postgres
              HOST={{ .host }}
              NAME={{ .database }}
              USER={{ .user }}
              PASSWD={{ .password }}`}}
      dataFrom:
        - extract:
            key: salamandre/forgejo/database
    # - name: app-ini-storage
    #   target:
    #     template:
    #       type: Opaque
    #       data:
    #         storage: |-
    #           {{`STORAGE_TYPE=minio
    #           MINIO_ENDPOINT={{ .endpoint }}
    #           MINIO_LOCATION={{ .region }}
    #           MINIO_ACCESS_KEY_ID={{ .accessKey }}
    #           MINIO_SECRET_ACCESS_KEY={{ .accessSecret }}
    #           MINIO_BUCKET={{ .bucket }}`}}
    #   dataFrom:
    #     - extract:
    #         key: salamandre/forgejo/s3
{{- if eq .Values.environment "dev" }}
    - name: vm-ca-tls
      target:
        template:
          type: kubernetes.io/tls
          data:
            tls.crt: '{{`{{ .crt }}`}}'
            tls.key: '{{`{{ .key }}`}}'
      dataFrom:
        - extract:
            key: salamandre/tls/vm-ca
{{ end -}}
