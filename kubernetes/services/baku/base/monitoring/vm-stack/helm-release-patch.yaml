apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: victoria-metrics-k8s-stack
spec:
  values:
    vmsingle:
      ingress:
        enabled: true
        annotations:
          traefik.ingress.kubernetes.io/router.middlewares: monitoring-vm-auth@kubernetescrd
          traefik.ingress.kubernetes.io/router.entrypoints: monitoring
        hosts:
          - &host monitor.${DOMAIN_NAME}
        tls:
          - hosts:
              - *host
      spec:
        retentionPeriod: "14" # 14 months
        storage:
          storageClassName: openebs-zfspv
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 50Gi

    vmagent:
      spec:
        externalLabels:
          cluster: baku

    alertmanager:
      useManagedConfig: true
      config:
        inhibit_rules:
          - target_matchers:
              - severity="info"
            source_matchers:
              - alertname=InfoInhibitor
        route:
          receiver: discord
          routes:
            - matchers:
                - alertname=InfoInhibitor
              receiver: blackhole
            - matchers:
                - alertname=Watchdog
              group_interval: 24h
              receiver: discord-watchdog
              continue: false
        receivers:
          - name: blackhole
          - name: discord
            discord_configs:
              - webhook_url: "${ALERTS_DISCORD_WEBHOOK_URL}"
                title: '{{ template "homecluster.discord.title" . }}'
                message: '{{ template "homecluster.discord.message" . }}'
          - name: discord-watchdog
            discord_configs:
              - webhook_url: "${WATCHDOG_DISCORD_WEBHOOK_URL}"
                title: '{{ template "homecluster.discord.title" . }}'
                message: '{{ template "homecluster.discord.message" . }}'
      monzoTemplate:
        enabled: false

      templateFiles:
        discord.tmpl: |-
          {{- define "homecluster.discord.title" }}
          {{- if .CommonLabels.cluster }}[{{ .CommonLabels.cluster }}] {{ end -}}
          {{- if gt (len .Alerts.Firing) 0 -}}
          Fire {{ .Alerts.Firing | len }} alerts
          {{- if gt (len .Alerts.Resolved) 0 }} and {{ end -}}
          {{- end -}}
          {{- if gt (len .Alerts.Resolved) 0 -}}
          {{- .Alerts.Resolved | len }} alerts resolved
          {{- end -}}
          {{- if .CommonLabels.job }} for {{ .CommonLabels.job }}{{ end }} !
          {{- end }}

          {{- define "homecluster.discord.message" }}
          {{- $alerts := 0 -}}
          {{- if gt (len .Alerts.Firing) 0 -}}
          {{- $alerts = .Alerts.Firing -}}
          {{- else -}}
          {{- $alerts = .Alerts.Resolved -}}
          {{- end -}}
          {{- range $alerts }}
          - Alert: {{ if .Labels.cluster }}[{{ .Labels.cluster }}] {{ end -}}
              **{{ if gt (len .Annotations.summary) 150 -}}
              {{- printf "%.150s..." .Annotations.summary -}}
              {{- else -}}
              {{- .Annotations.summary -}}
              {{- end }}**
              {{- if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
            Description:
            > {{ if gt (len .Annotations.description) 150 -}}
              {{- printf "%.150s..." .Annotations.description | reReplaceAll "\\n" "\\n  > " }}
              {{- else -}}
              {{- .Annotations.description | reReplaceAll "\\n" "\\n  > " }}
              {{- end }}
            Labels:
            > {{ range .Labels.SortedPairs }}
              {{- printf "`%s=%s`  " .Name .Value }}
              {{- end }}
          {{- end }}

          {{ if and (gt (len .Alerts.Firing) 0) (gt (len .Alerts.Resolved) 0) }}
          > Also {{ .Alerts.Resolved | len }} resolved alerts.
          {{- end }}
          {{- end }}

    # Disable tweaked alert rules
    defaultRules:
      rules:
        # Kubernetes system (change "apiserver" to "kubelet" for k3s)
        KubeClientErrors:
          create: true
          spec:
            expr: |-
              (sum(rate(rest_client_requests_total{job="kubelet",code=~"5.."}[5m])) by (instance,job,namespace,cluster)
                /
              sum(rate(rest_client_requests_total{job="kubelet"}[5m])) by (instance,job,namespace,cluster))
              > 0.01
      groups:
        kubeApiserverAvailability: # For k3s change
          create: false
        kubeApiserverBurnrate: # For k3s change
          create: false
        kubeApiserverHistogram: # For k3s change
          create: false
        kubernetesSystemApiserver: # For k3s change
          create: false
        vmagent: # remove dashboard annotation
          rules:
            spec:
              annotations:
                dashboard: ""
